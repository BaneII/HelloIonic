{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { CameraResultType, CameraSource, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery() {\n  const {\n    get,\n    set\n  } = useStorage();\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  const {\n    getPhoto\n  } = useCamera();\n  const [photos, setPhotos] = useState([]);\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    return getPhotoFile(photo, fileName);\n  };\n\n  const getPhotoFile = async (cameraPhoto, fileName) => {\n    return {\n      filepath: fileName,\n      webviewPath: cameraPhoto.webPath\n    };\n  };\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get('photos');\n      const photos = photosString ? JSON.parse(photosString) : [];\n\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.base64 = `data:image/jpeg;base64,${file.data}`;\n      }\n\n      setPhotos(photos);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get('photos');\n      const photos = photosString ? JSON.parse(photosString) : [];\n\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.base64 = `data:image/jpeg;base64,${file.data}`;\n      }\n\n      setPhotos(photos);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data, \n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p\n      };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/home/bane/2019-2020/HelloIonic/photo-gallery/src/hooks/usePhotoGallery.tsx"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","CameraResultType","CameraSource","FilesystemDirectory","PHOTO_STORAGE","usePhotoGallery","get","set","deleteFile","getUri","readFile","writeFile","getPhoto","photos","setPhotos","savePicture","photo","fileName","base64Data","webPath","path","data","directory","Data","getPhotoFile","cameraPhoto","filepath","webviewPath","loadSaved","photosString","JSON","parse","file","base64","takePhoto","resultType","Uri","source","Camera","quality","Date","getTime","savedFileImage","newPhotos","stringify","map","p","photoCopy"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\n\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery() {\n\n  const { get, set } = useStorage();\n\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n  const { getPhoto } = useCamera();\n  const [photos, setPhotos] = useState<Photo[]>([]);\n\n  const savePicture = async (photo: CameraPhoto, fileName: string) => {\n    const base64Data = await base64FromPath(photo.webPath!);\n    await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    return getPhotoFile(photo, fileName);\n  };\n\n  const getPhotoFile = async (cameraPhoto: CameraPhoto, fileName: string): Promise<Photo> => {\n    return {\n      filepath: fileName,\n      webviewPath: cameraPhoto.webPath\n    };\n  };\n\n  \n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get('photos');\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.base64 = `data:image/jpeg;base64,${file.data}`;\n      }\n      setPhotos(photos);\n    };\n    loadSaved();\n  }, [get, readFile]);\n\n\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get('photos');\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.base64 = `data:image/jpeg;base64,${file.data}`;\n      }\n      setPhotos(photos);\n    };\n    loadSaved();\n  }, [get, readFile]);\n\n\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos)\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data, \n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n\n\n}\n\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n  base64?: string;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}