{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery() {\n  const {\n    get,\n    set\n  } = useStorage();\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  const {\n    getPhoto\n  } = useCamera();\n  const [photos, setPhotos] = useState([]);\n\n  const savePicture = async (photo, fileName) => {\n    let base64Data; // \"hybrid\" will detect Cordova or Capacitor;\n\n    if (isPlatform('hybrid')) {\n      const file = await readFile({\n        path: photo.path\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath);\n    }\n\n    await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    return getPhotoFile(photo, fileName);\n  };\n\n  const getPhotoFile = async (cameraPhoto, fileName) => {\n    if (isPlatform('hybrid')) {\n      // Get the new, complete filepath of the photo saved on filesystem\n      const fileUri = await getUri({\n        directory: FilesystemDirectory.Data,\n        path: fileName\n      }); // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/core-concepts/webview#file-protocol\n\n      return {\n        filepath: fileUri.uri,\n        webviewPath: Capacitor.convertFileSrc(fileUri.uri)\n      };\n    } else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: cameraPhoto.webPath\n      };\n    }\n  };\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get('photos');\n      const photosInStorage = photosString ? JSON.parse(photosString) : []; // If running on the web...\n\n      if (!isPlatform('hybrid')) {\n        for (let photo of photosInStorage) {\n          const file = await readFile({\n            path: photo.filepath,\n            directory: FilesystemDirectory.Data\n          }); // Web platform only: Save the photo into the base64 field\n\n          photo.base64 = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n\n      setPhotos(photosInStorage);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE, isPlatform('hybrid') ? JSON.stringify(newPhotos) : JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data,\n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p\n      };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/home/bane/2019-2020/HelloIonic/photo-gallery/src/hooks/usePhotoGallery.tsx"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","isPlatform","CameraResultType","CameraSource","Capacitor","FilesystemDirectory","PHOTO_STORAGE","usePhotoGallery","get","set","deleteFile","getUri","readFile","writeFile","getPhoto","photos","setPhotos","savePicture","photo","fileName","base64Data","file","path","data","webPath","directory","Data","getPhotoFile","cameraPhoto","fileUri","filepath","uri","webviewPath","convertFileSrc","loadSaved","photosString","photosInStorage","JSON","parse","base64","takePhoto","resultType","Uri","source","Camera","quality","Date","getTime","savedFileImage","newPhotos","stringify","map","p","photoCopy"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\n\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery() {\n\n  const { get, set } = useStorage();\n\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n  const { getPhoto } = useCamera();\n  const [photos, setPhotos] = useState<Photo[]>([]);\n\n\n\n  const savePicture = async (photo: CameraPhoto, fileName: string) => {\n    let base64Data: string;\n    // \"hybrid\" will detect Cordova or Capacitor;\n    if (isPlatform('hybrid')) {\n      const file = await readFile({\n        path: photo.path!\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath!);\n    }\n    await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    return getPhotoFile(photo, fileName);\n  };\n\n\n\n\n  const getPhotoFile = async (cameraPhoto: CameraPhoto, fileName: string): Promise<Photo> => {\n    if (isPlatform('hybrid')) {\n      // Get the new, complete filepath of the photo saved on filesystem\n      const fileUri = await getUri({\n        directory: FilesystemDirectory.Data,\n        path: fileName\n      });\n\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/core-concepts/webview#file-protocol\n      return {\n        filepath: fileUri.uri,\n        webviewPath: Capacitor.convertFileSrc(fileUri.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: cameraPhoto.webPath\n      };\n    }\n  };\n\n\n\n\n\n  useEffect(() => {\n      const loadSaved = async () => {\n        const photosString = await get('photos');\n        const photosInStorage = (photosString ? JSON.parse(photosString) : []) as Photo[];\n        // If running on the web...\n        if (!isPlatform('hybrid')) {\n          for (let photo of photosInStorage) {\n            const file = await readFile({\n              path: photo.filepath,\n              directory: FilesystemDirectory.Data\n            });\n            // Web platform only: Save the photo into the base64 field\n            photo.base64 = `data:image/jpeg;base64,${file.data}`;\n          }\n        }\n        setPhotos(photosInStorage);\n      };\n    loadSaved();\n  }, [get, readFile]);\n\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE,\n      isPlatform('hybrid')\n        ? JSON.stringify(newPhotos)\n        : JSON.stringify(newPhotos.map(p => {\n          // Don't save the base64 representation of the photo data,\n          // since it's already saved on the Filesystem\n          const photoCopy = { ...p };\n          delete photoCopy.base64;\n          return photoCopy;\n        })));\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n\n\n}\n\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n  base64?: string;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}